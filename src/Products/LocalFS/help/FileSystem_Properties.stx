Local File System - Properties: Manage the properties of a Local File System.

  Description

    This view allows you to edit and define properties on a Local File 
    System object. 

    File System properties

      'title' -- The optional title of the Local File System object.

      'basepath' -- The path to the directory in the file system where the Local 
            File System accesses its contents.

      'username' -- The username for Windows share that requires login information.

      'password' -- The password for a Windows share that requires login information.

      'default_document' -- A space-delimited list of files that Local File 
            System will display instead of the browsing the directory.
            For example, if the default document is 'index.html' and a local 
            directory contains a file by that name, it will be displayed instead 
            of the default directory browse view.

      'type_map' -- Used to associate file extensions with content-types 
            and Zope object classes. It consists of a list of mappings, one per line. 
            Each line contains fields separated by tabs or spaces. The first field is 
            a file extension. The second field is a content-type associated with that 
            extension. The third field is optional and contains a Zope object class 
            to associate with the extension. Zope object classes can be specified in 
            one of several ways.

            - The class can be DTMLDocument, DTMLMethod, Image, or File.
              These object types are built into LocalFS.
              File is the default object class if none is specified.

            - The class can be specified using its full path including the
              module name, i.e. "Products.XMLDocument.XMLDocument.Document".
              If the class defines a method 'createSelf(id, data)' which
              returns an object of this class, then this method will be 
              called as a 'static' unbound member function to create the 
              object. This allows products to provide their own factory functions
              to create objects from local files.

            - If the class doesn't contain a factory function then an optional 
              fourth parameter to the mapping is the name of a factory class. 
              This class may be implemented in a file in the Extensions directory, 
              in which case the class should be specified as 
              "(module name).(class name)", or it may be in the Extensions directory
              inside a product directory, in which case it should be specified as
              "(product name).(module name).(class name)".
              The factory class should define a __call__(self, id, data)
              method which returns the object.

            - If all of these methods fail then the object is created with the 
              default class of File.

      'icon_map' -- Associates a file's content-type with the icon used to 
            display the file in the directory browse view. The format is similar to 
            the type map. The first field contains a content-type. The second field 
            contains the path of the icon object displayed for that content-type in 
            the directory browse view. The icon can exist anywhere in the object tree, 
            but it must be a path that can be resolved by URL traversal. The default 
            icon is 'misc_/LocalFS/generic.gif'. All icons in the 'www' subdirectory 
            of the LocalFS product are loaded into the 'misc_/LocalFS' folder on startup.

      'catalog' -- Enabling this property causes objects in the local file system
            to be included in ZCatalog searches. *This can cause a significant performance
            penalty especially when the file system contains many files or very large
            files.* It may also incur performance penalties in other areas having nothing
            to do with cataloging. Enable this option only if necessary.

      'tree_view' -- Controls whether the Local File System object will be displayed
            in the management tree and other instances of the <dtml-tree> tag.

    Property types

      'boolean' -- 1 or 0. 

      'date' -- A 'DateTime' value, for example '12/31/1999 15:42:52 PST'.
      
      'float' -- A decimal number, for example '12.4'. 

      'int' -- An integer number, for example, '12'. 

      'lines' -- A list of strings, one per line. 

      'long' -- A long integer, for example '12232322322323232323423'. 

      'string' -- A string of characters, for example 'This is a string'. 

      'text' -- A multi-line string, for example a paragraph. 

      'tokens' -- A list of strings separated by white space, for example
      'one two three'. 

      'selection' -- A string selected by a pop-up menu. 

      'multiple selection' -- A list of strings selected by a selection list.
      
  Controls

     Editing Properties

      Existing properties can be edited by selecting them.

      '[Checkbox]' -- Select the properties to change.
      
      'Property' -- The value of the property. 

      'Save Changes' -- Changes the value of the selected properties.

      'Delete' -- Deletes the selected properties.

    Creating new properties

      'Id' -- The id of the property.

      'Type' -- The type of the property.

      'Value' -- The value of the property.

         **Note: When creating 'selection' and 'multiple selection'
         properties, specify the name of another property (or method)
         as the 'Value'. This property (or method) should return a
         list of strings will be used to provide choices for the
         selection.** 

      'Add' -- Creates a new property.

 
